[
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "DataSets",
        "importPath": "app.api.context.data_sets",
        "description": "app.api.context.data_sets",
        "isExtraImport": true,
        "detail": "app.api.context.data_sets",
        "documentation": {}
    },
    {
        "label": "DataSets",
        "importPath": "app.api.context.data_sets",
        "description": "app.api.context.data_sets",
        "isExtraImport": true,
        "detail": "app.api.context.data_sets",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "RandomForestClassifier",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "KFold",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "cross_val_score",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "app.api.context.models",
        "description": "app.api.context.models",
        "isExtraImport": true,
        "detail": "app.api.context.models",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "xarray",
        "description": "xarray",
        "isExtraImport": true,
        "detail": "xarray",
        "documentation": {}
    },
    {
        "label": "TitanicModel",
        "importPath": "app.api.titanic.model.titanic_model",
        "description": "app.api.titanic.model.titanic_model",
        "isExtraImport": true,
        "detail": "app.api.titanic.model.titanic_model",
        "documentation": {}
    },
    {
        "label": "TitanicModel",
        "importPath": "app.api.titanic.model.titanic_model",
        "description": "app.api.titanic.model.titanic_model",
        "isExtraImport": true,
        "detail": "app.api.titanic.model.titanic_model",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "TitanicService",
        "importPath": "app.api.titanic.service.titanic_service",
        "description": "app.api.titanic.service.titanic_service",
        "isExtraImport": true,
        "detail": "app.api.titanic.service.titanic_service",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.titanic.web.titanic_router",
        "description": "app.api.titanic.web.titanic_router",
        "isExtraImport": true,
        "detail": "app.api.titanic.web.titanic_router",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain.chat_models.openai",
        "description": "langchain.chat_models.openai",
        "isExtraImport": true,
        "detail": "langchain.chat_models.openai",
        "documentation": {}
    },
    {
        "label": "HumanMessage",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "AIMessage",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "SystemMessage",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.main_router",
        "description": "app.main_router",
        "isExtraImport": true,
        "detail": "app.main_router",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "starlette.middleware.cors",
        "description": "starlette.middleware.cors",
        "isExtraImport": true,
        "detail": "starlette.middleware.cors",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "DataModel",
        "importPath": "context.model.data_model",
        "description": "context.model.data_model",
        "isExtraImport": true,
        "detail": "context.model.data_model",
        "documentation": {}
    },
    {
        "label": "DataModel",
        "importPath": "context.model.data_model",
        "description": "context.model.data_model",
        "isExtraImport": true,
        "detail": "context.model.data_model",
        "documentation": {}
    },
    {
        "label": "CrimeDataset",
        "importPath": "crime.model.crime_dataset",
        "description": "crime.model.crime_dataset",
        "isExtraImport": true,
        "detail": "crime.model.crime_dataset",
        "documentation": {}
    },
    {
        "label": "CrimeDataset",
        "importPath": "crime.model.crime_dataset",
        "description": "crime.model.crime_dataset",
        "isExtraImport": true,
        "detail": "crime.model.crime_dataset",
        "documentation": {}
    },
    {
        "label": "CrimeDataset",
        "importPath": "crime.model.crime_dataset",
        "description": "crime.model.crime_dataset",
        "isExtraImport": true,
        "detail": "crime.model.crime_dataset",
        "documentation": {}
    },
    {
        "label": "CrimeDataset",
        "importPath": "crime.model.crime_dataset",
        "description": "crime.model.crime_dataset",
        "isExtraImport": true,
        "detail": "crime.model.crime_dataset",
        "documentation": {}
    },
    {
        "label": "CrimeModel",
        "importPath": "crime.model.crime_model",
        "description": "crime.model.crime_model",
        "isExtraImport": true,
        "detail": "crime.model.crime_model",
        "documentation": {}
    },
    {
        "label": "CrimeModel",
        "importPath": "crime.model.crime_model",
        "description": "crime.model.crime_model",
        "isExtraImport": true,
        "detail": "crime.model.crime_model",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "myRandom",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "Member",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "memberlist",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "myRandom",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "myRandom",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "myRandom",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "folium",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "folium",
        "description": "folium",
        "detail": "folium",
        "documentation": {}
    },
    {
        "label": "preprocessing",
        "importPath": "sklearn",
        "description": "sklearn",
        "isExtraImport": true,
        "detail": "sklearn",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "example.crime_util",
        "description": "example.crime_util",
        "isExtraImport": true,
        "detail": "example.crime_util",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "example.crime_util",
        "description": "example.crime_util",
        "isExtraImport": true,
        "detail": "example.crime_util",
        "documentation": {}
    },
    {
        "label": "Kkma",
        "importPath": "konlpy.tag",
        "description": "konlpy.tag",
        "isExtraImport": true,
        "detail": "konlpy.tag",
        "documentation": {}
    },
    {
        "label": "Komoran",
        "importPath": "konlpy.tag",
        "description": "konlpy.tag",
        "isExtraImport": true,
        "detail": "konlpy.tag",
        "documentation": {}
    },
    {
        "label": "Okt",
        "importPath": "konlpy.tag",
        "description": "konlpy.tag",
        "isExtraImport": true,
        "detail": "konlpy.tag",
        "documentation": {}
    },
    {
        "label": "Hannanum",
        "importPath": "konlpy.tag",
        "description": "konlpy.tag",
        "isExtraImport": true,
        "detail": "konlpy.tag",
        "documentation": {}
    },
    {
        "label": "Kkma",
        "importPath": "konlpy.tag",
        "description": "konlpy.tag",
        "isExtraImport": true,
        "detail": "konlpy.tag",
        "documentation": {}
    },
    {
        "label": "Komoran",
        "importPath": "konlpy.tag",
        "description": "konlpy.tag",
        "isExtraImport": true,
        "detail": "konlpy.tag",
        "documentation": {}
    },
    {
        "label": "Okt",
        "importPath": "konlpy.tag",
        "description": "konlpy.tag",
        "isExtraImport": true,
        "detail": "konlpy.tag",
        "documentation": {}
    },
    {
        "label": "Hannanum",
        "importPath": "konlpy.tag",
        "description": "konlpy.tag",
        "isExtraImport": true,
        "detail": "konlpy.tag",
        "documentation": {}
    },
    {
        "label": "ic",
        "importPath": "icecream",
        "description": "icecream",
        "isExtraImport": true,
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "ic",
        "importPath": "icecream",
        "description": "icecream",
        "isExtraImport": true,
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "ic",
        "importPath": "icecream",
        "description": "icecream",
        "isExtraImport": true,
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "ic",
        "importPath": "icecream",
        "description": "icecream",
        "isExtraImport": true,
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "konlpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "konlpy",
        "description": "konlpy",
        "detail": "konlpy",
        "documentation": {}
    },
    {
        "label": "nltk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk",
        "description": "nltk",
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "FreqDist",
        "importPath": "nltk",
        "description": "nltk",
        "isExtraImport": true,
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "tweepy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tweepy",
        "description": "tweepy",
        "detail": "tweepy",
        "documentation": {}
    },
    {
        "label": "PrinterBase",
        "importPath": "example.crime_abstract",
        "description": "example.crime_abstract",
        "isExtraImport": true,
        "detail": "example.crime_abstract",
        "documentation": {}
    },
    {
        "label": "ReaderBase",
        "importPath": "example.crime_abstract",
        "description": "example.crime_abstract",
        "isExtraImport": true,
        "detail": "example.crime_abstract",
        "documentation": {}
    },
    {
        "label": "ScraperBase",
        "importPath": "example.crime_abstract",
        "description": "example.crime_abstract",
        "isExtraImport": true,
        "detail": "example.crime_abstract",
        "documentation": {}
    },
    {
        "label": "EditorBase",
        "importPath": "example.crime_abstract",
        "description": "example.crime_abstract",
        "isExtraImport": true,
        "detail": "example.crime_abstract",
        "documentation": {}
    },
    {
        "label": "googlemaps",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "googlemaps",
        "description": "googlemaps",
        "detail": "googlemaps",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "myRandom",
        "importPath": "example.utils",
        "description": "example.utils",
        "isExtraImport": true,
        "detail": "example.utils",
        "documentation": {}
    },
    {
        "label": "PopModel",
        "importPath": "crime.model.pop_model",
        "description": "crime.model.pop_model",
        "isExtraImport": true,
        "detail": "crime.model.pop_model",
        "documentation": {}
    },
    {
        "label": "word_tokenize",
        "importPath": "nltk.tokenize",
        "description": "nltk.tokenize",
        "isExtraImport": true,
        "detail": "nltk.tokenize",
        "documentation": {}
    },
    {
        "label": "WordCloud",
        "importPath": "wordcloud",
        "description": "wordcloud",
        "isExtraImport": true,
        "detail": "wordcloud",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pykiwoom.kiwoom",
        "description": "pykiwoom.kiwoom",
        "isExtraImport": true,
        "detail": "pykiwoom.kiwoom",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "BMI",
        "importPath": "example.bmi",
        "description": "example.bmi",
        "isExtraImport": true,
        "detail": "example.bmi",
        "documentation": {}
    },
    {
        "label": "LeapYear",
        "importPath": "example.leap_year",
        "description": "example.leap_year",
        "isExtraImport": true,
        "detail": "example.leap_year",
        "documentation": {}
    },
    {
        "label": "RPS",
        "importPath": "get_sample.example.rps",
        "description": "get_sample.example.rps",
        "isExtraImport": true,
        "detail": "get_sample.example.rps",
        "documentation": {}
    },
    {
        "label": "DataSets",
        "kind": 6,
        "importPath": "backend.app.api.context.data_sets",
        "description": "backend.app.api.context.data_sets",
        "peekOfCode": "class DataSets:\n    _fname : str = '' # file name\n    _dname : str = '' # data path\n    _sname : str = '' # save path\n    _train : object = None\n    _test : object = None\n    _id : str = ''\n    _label : str = ''\n    @property\n    def fname(self) -> str: return self._fname",
        "detail": "backend.app.api.context.data_sets",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 6,
        "importPath": "backend.app.api.context.models",
        "description": "backend.app.api.context.models",
        "peekOfCode": "class models:\n    def __init__(self) -> None:\n        self.ds = DataSets()\n        this = self.ds\n        this.dname = './app/api/titanic/data/'\n        this.sname = './app/api/titanic/save/'\n    def new_dataframe_with_index(self, fname: pd.DataFrame) -> pd.DataFrame:\n        this = self.ds\n        # index_col=0 해야 기존 index 값이 유지된다. \n        # 0은 컬럼명 중에서 첫번째를 의미한다.(배열구조)",
        "detail": "backend.app.api.context.models",
        "documentation": {}
    },
    {
        "label": "1st",
        "kind": 5,
        "importPath": "backend.app.api.titanic.model.titanic_feature",
        "description": "backend.app.api.titanic.model.titanic_feature",
        "peekOfCode": "1st = Upper\n2nd = Middle\n3rd = Lower\nage: Age is fractional if less than 1.\nIf the age is estimated, is it in the form of xx.5\nsibsp: The dataset defines family relations in this way...\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fiancés were ignored)\nparch: The dataset defines family relations in this way...\nParent = mother, father",
        "detail": "backend.app.api.titanic.model.titanic_feature",
        "documentation": {}
    },
    {
        "label": "2nd",
        "kind": 5,
        "importPath": "backend.app.api.titanic.model.titanic_feature",
        "description": "backend.app.api.titanic.model.titanic_feature",
        "peekOfCode": "2nd = Middle\n3rd = Lower\nage: Age is fractional if less than 1.\nIf the age is estimated, is it in the form of xx.5\nsibsp: The dataset defines family relations in this way...\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fiancés were ignored)\nparch: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson",
        "detail": "backend.app.api.titanic.model.titanic_feature",
        "documentation": {}
    },
    {
        "label": "3rd",
        "kind": 5,
        "importPath": "backend.app.api.titanic.model.titanic_feature",
        "description": "backend.app.api.titanic.model.titanic_feature",
        "peekOfCode": "3rd = Lower\nage: Age is fractional if less than 1.\nIf the age is estimated, is it in the form of xx.5\nsibsp: The dataset defines family relations in this way...\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fiancés were ignored)\nparch: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.",
        "detail": "backend.app.api.titanic.model.titanic_feature",
        "documentation": {}
    },
    {
        "label": "Sibling",
        "kind": 5,
        "importPath": "backend.app.api.titanic.model.titanic_feature",
        "description": "backend.app.api.titanic.model.titanic_feature",
        "peekOfCode": "Sibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fiancés were ignored)\nparch: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.\n컬럼(column) = 변수(variable) = 피처(feature)\n'Survived', --> label\n'Pclass',\n'Name',",
        "detail": "backend.app.api.titanic.model.titanic_feature",
        "documentation": {}
    },
    {
        "label": "Spouse",
        "kind": 5,
        "importPath": "backend.app.api.titanic.model.titanic_feature",
        "description": "backend.app.api.titanic.model.titanic_feature",
        "peekOfCode": "Spouse = husband, wife (mistresses and fiancés were ignored)\nparch: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.\n컬럼(column) = 변수(variable) = 피처(feature)\n'Survived', --> label\n'Pclass',\n'Name',\n'Sex',",
        "detail": "backend.app.api.titanic.model.titanic_feature",
        "documentation": {}
    },
    {
        "label": "Parent",
        "kind": 5,
        "importPath": "backend.app.api.titanic.model.titanic_feature",
        "description": "backend.app.api.titanic.model.titanic_feature",
        "peekOfCode": "Parent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.\n컬럼(column) = 변수(variable) = 피처(feature)\n'Survived', --> label\n'Pclass',\n'Name',\n'Sex',\n'Age',\n'SibSp',",
        "detail": "backend.app.api.titanic.model.titanic_feature",
        "documentation": {}
    },
    {
        "label": "Child",
        "kind": 5,
        "importPath": "backend.app.api.titanic.model.titanic_feature",
        "description": "backend.app.api.titanic.model.titanic_feature",
        "peekOfCode": "Child = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.\n컬럼(column) = 변수(variable) = 피처(feature)\n'Survived', --> label\n'Pclass',\n'Name',\n'Sex',\n'Age',\n'SibSp',\n'Parch',",
        "detail": "backend.app.api.titanic.model.titanic_feature",
        "documentation": {}
    },
    {
        "label": "컬럼(column)",
        "kind": 5,
        "importPath": "backend.app.api.titanic.model.titanic_feature",
        "description": "backend.app.api.titanic.model.titanic_feature",
        "peekOfCode": "컬럼(column) = 변수(variable) = 피처(feature)\n'Survived', --> label\n'Pclass',\n'Name',\n'Sex',\n'Age',\n'SibSp',\n'Parch',\n'Ticket',\n'Fare',",
        "detail": "backend.app.api.titanic.model.titanic_feature",
        "documentation": {}
    },
    {
        "label": "TitanicModel",
        "kind": 6,
        "importPath": "backend.app.api.titanic.model.titanic_model",
        "description": "backend.app.api.titanic.model.titanic_model",
        "peekOfCode": "class TitanicModel(object):\n    model = models()\n    dataset = DataSets()\n    def preprocess(self, train_fname, test_fname) -> object:\n        this = self.dataset\n        that = self.model\n        feature = ['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\n        # 데이터셋은 Train과 Test, Validation 3종류로 나뉘어져 있다.\n        this.train = that.new_dataframe_no_index(train_fname)\n        this.test = that.new_dataframe_no_index(test_fname)",
        "detail": "backend.app.api.titanic.model.titanic_model",
        "documentation": {}
    },
    {
        "label": "TitanicService",
        "kind": 6,
        "importPath": "backend.app.api.titanic.service.titanic_service",
        "description": "backend.app.api.titanic.service.titanic_service",
        "peekOfCode": "class TitanicService:\n    model = TitanicModel()\n    def preprocess(self) :\n        print(f'전처리 시작')\n        self.model.preprocess('train.csv', 'test.csv')\n    def modeling(self):\n        print(f'모델링 시작')\n        this = self.model\n    def learning(self):\n        print(f'학습 시작')",
        "detail": "backend.app.api.titanic.service.titanic_service",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 6,
        "importPath": "backend.app.api.titanic.web.titanic_router",
        "description": "backend.app.api.titanic.web.titanic_router",
        "peekOfCode": "class Request(BaseModel):\n    question :str\nclass Response(BaseModel):\n    answer :str\n@router.post(\"/titanic\")\nasync def titanic(req:Request):\n    print(\"titanic 진입완1\")\n    hello = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\backend\\\\app\\\\api\\\\titanic\\\\data\\\\hellow.txt'\n    f = open(hello, \"r\", encoding=\"utf-8\")\n    data = f.read()",
        "detail": "backend.app.api.titanic.web.titanic_router",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "backend.app.api.titanic.web.titanic_router",
        "description": "backend.app.api.titanic.web.titanic_router",
        "peekOfCode": "class Response(BaseModel):\n    answer :str\n@router.post(\"/titanic\")\nasync def titanic(req:Request):\n    print(\"titanic 진입완1\")\n    hello = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\backend\\\\app\\\\api\\\\titanic\\\\data\\\\hellow.txt'\n    f = open(hello, \"r\", encoding=\"utf-8\")\n    data = f.read()\n    print(data)\n    f.close()",
        "detail": "backend.app.api.titanic.web.titanic_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.app.api.titanic.web.titanic_router",
        "description": "backend.app.api.titanic.web.titanic_router",
        "peekOfCode": "router = APIRouter()\nservice = TitanicService()\nclass Request(BaseModel):\n    question :str\nclass Response(BaseModel):\n    answer :str\n@router.post(\"/titanic\")\nasync def titanic(req:Request):\n    print(\"titanic 진입완1\")\n    hello = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\backend\\\\app\\\\api\\\\titanic\\\\data\\\\hellow.txt'",
        "detail": "backend.app.api.titanic.web.titanic_router",
        "documentation": {}
    },
    {
        "label": "service",
        "kind": 5,
        "importPath": "backend.app.api.titanic.web.titanic_router",
        "description": "backend.app.api.titanic.web.titanic_router",
        "peekOfCode": "service = TitanicService()\nclass Request(BaseModel):\n    question :str\nclass Response(BaseModel):\n    answer :str\n@router.post(\"/titanic\")\nasync def titanic(req:Request):\n    print(\"titanic 진입완1\")\n    hello = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\backend\\\\app\\\\api\\\\titanic\\\\data\\\\hellow.txt'\n    f = open(hello, \"r\", encoding=\"utf-8\")",
        "detail": "backend.app.api.titanic.web.titanic_router",
        "documentation": {}
    },
    {
        "label": "특성변수",
        "kind": 5,
        "importPath": "backend.app.basic.ml_algorithm_10",
        "description": "backend.app.basic.ml_algorithm_10",
        "peekOfCode": "특성변수 = 독립변수 = 외생변수 = x변수\n목적변수 \n'''",
        "detail": "backend.app.basic.ml_algorithm_10",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.app.main_router",
        "description": "backend.app.main_router",
        "peekOfCode": "router = APIRouter()\nrouter.include_router(titanic_router, prefix=\"/chat\")",
        "detail": "backend.app.main_router",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 6,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "class Request(BaseModel):\n    question: str\nclass Response(BaseModel):\n    answer: str\nllm = ChatOpenAI(openai_api_key=\"...\")\napp = FastAPI()\napp.include_router(router, prefix=\"/api\")\norigins = [\n    \"*\"\n]",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "class Response(BaseModel):\n    answer: str\nllm = ChatOpenAI(openai_api_key=\"...\")\napp = FastAPI()\napp.include_router(router, prefix=\"/api\")\norigins = [\n    \"*\"\n]\napp.add_middleware(\n    CORSMiddleware,",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "chatting",
        "kind": 2,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "def chatting(req:Request):\n    print(req)\n    chat= ChatOpenAI(\n        openai_api_key=os.environ[\"api_key\"],\n        temperature=0.1,\n        max_tokens=2048,\n        model_name = 'gpt-3.5-turbo-0613'\n    )\n    # question = '대한민국의 수도는 뭐야?'질문Unexpected indentation\n    # result = chat.predict(question)",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.abspath(__file__))\nload_dotenv(os.path.join(BASE_DIR, \".env\"))\nclass Request(BaseModel):\n    question: str\nclass Response(BaseModel):\n    answer: str\nllm = ChatOpenAI(openai_api_key=\"...\")\napp = FastAPI()\napp.include_router(router, prefix=\"/api\")\norigins = [",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "llm = ChatOpenAI(openai_api_key=\"...\")\napp = FastAPI()\napp.include_router(router, prefix=\"/api\")\norigins = [\n    \"*\"\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "app = FastAPI()\napp.include_router(router, prefix=\"/api\")\norigins = [\n    \"*\"\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "origins = [\n    \"*\"\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "DataModel",
        "kind": 6,
        "importPath": "get_sample.context.model.data_model",
        "description": "get_sample.context.model.data_model",
        "peekOfCode": "class DataModel:\n    _dname : str = ''\n    _sname : str = ''\n    _fname : str = ''\n    _train : str = ''\n    _test : str = ''\n    _id : str = ''\n    _label : str = ''\n    @property\n    def dname(self) -> str : return self._dname",
        "detail": "get_sample.context.model.data_model",
        "documentation": {}
    },
    {
        "label": "MemberModel",
        "kind": 6,
        "importPath": "get_sample.context.model.member_model",
        "description": "get_sample.context.model.member_model",
        "peekOfCode": "class MemberModel:\n    _name : str = ''\n    _height : float = 0.0\n    _weight : float = 0.0\n    @property\n    def name(self) -> str: return self._name\n    @name.setter\n    def name(self, name: str): self._name = name\n    @property\n    def height(self) -> float: return self._height",
        "detail": "get_sample.context.model.member_model",
        "documentation": {}
    },
    {
        "label": "DataService",
        "kind": 6,
        "importPath": "get_sample.context.service.data_service",
        "description": "get_sample.context.service.data_service",
        "peekOfCode": "class DataService:\n    def __init__(self):\n        self.data = DataModel()\n        this = self.data\n        this.dname = './data/'\n        this.sname = './save/'\n    def get_sname(self):\n        return self.data.sname\n    def new_dframe_idx(self, fname: str) -> object:\n        this = self.data",
        "detail": "get_sample.context.service.data_service",
        "documentation": {}
    },
    {
        "label": "CrimeDataset",
        "kind": 6,
        "importPath": "get_sample.crime.model.crime_dataset",
        "description": "get_sample.crime.model.crime_dataset",
        "peekOfCode": "class CrimeDataset:\n    _dname : str = ''\n    _sname : str = ''\n    _fname : str = ''\n    _cctv : str = ''\n    _crime : str = ''\n    _pop : str = ''\n    _police : str = ''\n    _unemployment : str = ''\n    _id : str = ''",
        "detail": "get_sample.crime.model.crime_dataset",
        "documentation": {}
    },
    {
        "label": "CrimeModel",
        "kind": 6,
        "importPath": "get_sample.crime.model.crime_model",
        "description": "get_sample.crime.model.crime_model",
        "peekOfCode": "class CrimeModel:\n    def __init__(self) -> None:\n        self.ds = CrimeDataset()\n        this = self.ds\n        this.dname = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\get_sample\\\\crime\\\\data\\\\'\n        this.sname = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\get_sample\\\\crime\\\\save\\\\'\n    def new_dataframe_with_index(self, fname: pd.DataFrame) -> pd.DataFrame:\n        this = self.ds\n        # index_col=0 해야 기존 index 값이 유지된다. \n        # 0은 컬럼명 중에서 첫번째를 의미한다.(배열구조)",
        "detail": "get_sample.crime.model.crime_model",
        "documentation": {}
    },
    {
        "label": "PopModel",
        "kind": 6,
        "importPath": "get_sample.crime.model.pop_model",
        "description": "get_sample.crime.model.pop_model",
        "peekOfCode": "class PopModel:\n    def __init__(self) -> None:\n        self.ds = CrimeDataset()\n        this = self.ds\n    def new_dataframe_with_index(self, fname: pd.DataFrame) -> pd.DataFrame:\n        this = self.ds\n        # index_col=0 해야 기존 index 값이 유지된다. \n        # 0은 컬럼명 중에서 첫번째를 의미한다.(배열구조)\n        # pd.read_csv(f'경로/파일명/csv',index_col=0 => 인덱스로 지정할 column 명) index 지정\n        return pd.read_csv(f'{this.dname}{fname}',index_col=0)    ",
        "detail": "get_sample.crime.model.pop_model",
        "documentation": {}
    },
    {
        "label": "CrimeService",
        "kind": 6,
        "importPath": "get_sample.crime.service.crime_service",
        "description": "get_sample.crime.service.crime_service",
        "peekOfCode": "class CrimeService:\n    def __init__(self):\n        self.data = CrimeModel()\n        this = self.data\n        this.dname = './data/'\n        this.sname = './save/'\n    def get_sname(self):\n        return self.data.sname\n    def new_dframe_idx(self, fname: str) -> object:\n        this = self.data",
        "detail": "get_sample.crime.service.crime_service",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "get_sample.example.bit_bank",
        "description": "get_sample.example.bit_bank",
        "peekOfCode": "class Account:\n    def __init__(self, name, account_number, money) -> None:\n        '''\n        [요구사항(RFP)]\n        은행이름은 비트은행이다.\n        입금자 이름(name), 계좌번호(account_number), 금액(money) 속성값으로 계좌를 생성한다.\n        계좌번호는 3자리-2자리-6자리 형태로 랜덤하게 생성된다.\n        예를들면 123-12-123456 이다.\n        금액은 100 ~ 999 사이로 랜덤하게 입금된다. (단위는 만단위로 암묵적으로 판단한다)\n        '''",
        "detail": "get_sample.example.bit_bank",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "get_sample.example.bit_bank",
        "description": "get_sample.example.bit_bank",
        "peekOfCode": "today = datetime.datetime.now()\nclass Account:\n    def __init__(self, name, account_number, money) -> None:\n        '''\n        [요구사항(RFP)]\n        은행이름은 비트은행이다.\n        입금자 이름(name), 계좌번호(account_number), 금액(money) 속성값으로 계좌를 생성한다.\n        계좌번호는 3자리-2자리-6자리 형태로 랜덤하게 생성된다.\n        예를들면 123-12-123456 이다.\n        금액은 100 ~ 999 사이로 랜덤하게 입금된다. (단위는 만단위로 암묵적으로 판단한다)",
        "detail": "get_sample.example.bit_bank",
        "documentation": {}
    },
    {
        "label": "BMI",
        "kind": 6,
        "importPath": "get_sample.example.bmi",
        "description": "get_sample.example.bmi",
        "peekOfCode": "class BMI():\n    member = Member()\n    def __init__(self) -> None:\n        '''utils.py / Members(), myRandom() 를 이용하여 BMI 지수를 구하는 계산기를 작성합니다.'''\n    def getgetBMI(self, height, weight) :\n        this = self.member\n        print(f'여기까지 ㅇㅋ')\n        this = self.create_rows(this)\n        print(f'여기까지 ㅇㅋ')\n        print(f'여기까지 ㅇㅋ')",
        "detail": "get_sample.example.bmi",
        "documentation": {}
    },
    {
        "label": "Calculator",
        "kind": 6,
        "importPath": "get_sample.example.calculator",
        "description": "get_sample.example.calculator",
        "peekOfCode": "class Calculator:\n    def __init__(self, a, opcode, b):\n        print(f'utils.py / myRandom() 을 이용하여 자동 랜덤 계산기를 생성합니다')\n        print('(ex) 5 + 4 = 9')",
        "detail": "get_sample.example.calculator",
        "documentation": {}
    },
    {
        "label": "BugsMusic",
        "kind": 6,
        "importPath": "get_sample.example.crawling",
        "description": "get_sample.example.crawling",
        "peekOfCode": "class BugsMusic(object):\n    def __init__(self) -> None:\n        self.url = 'https://music.bugs.co.kr/chart/track/realtime/total?'\n        self.headers = {'User-Agent': 'Mozilla/5.0'}\n        self.class_name = []\n        self.title_list = []\n        self.artist_list = []\n        self.dict = {}\n    def set_url(self, detail):\n        self.url = requests.get(f'{self.url}{detail}', headers=self.headers).text",
        "detail": "get_sample.example.crawling",
        "documentation": {}
    },
    {
        "label": "ScrapBugs",
        "kind": 6,
        "importPath": "get_sample.example.crawling2",
        "description": "get_sample.example.crawling2",
        "peekOfCode": "class ScrapBugs(object):\n    def __init__(self) -> None:\n        pass\n    def scrap(self) -> {}:\n        print('벅스 뮤직 사이트에서 데이터를 수집합니다.')\n        url = 'https://music.bugs.co.kr/chart/track/realtime/total?'\n        html_doc = urlopen(url)\n        soup = BeautifulSoup(html_doc, 'lxml')\n        list1 = self.find_music(soup,'title')\n        list2 = self.find_music(soup,'artist')",
        "detail": "get_sample.example.crawling2",
        "documentation": {}
    },
    {
        "label": "EditorBase",
        "kind": 6,
        "importPath": "get_sample.example.crime_abstract",
        "description": "get_sample.example.crime_abstract",
        "peekOfCode": "class EditorBase(metaclass=ABCMeta):\n    @abstractmethod\n    def dropna(self,this:pd.DataFrame)->pd.DataFrame:\n        this = this.dropna()\n        return this\nclass PrinterBase(metaclass=ABCMeta):\n    @abstractmethod\n    def print(self):\n        pass\nclass ReaderBase(metaclass=ABCMeta):",
        "detail": "get_sample.example.crime_abstract",
        "documentation": {}
    },
    {
        "label": "PrinterBase",
        "kind": 6,
        "importPath": "get_sample.example.crime_abstract",
        "description": "get_sample.example.crime_abstract",
        "peekOfCode": "class PrinterBase(metaclass=ABCMeta):\n    @abstractmethod\n    def print(self):\n        pass\nclass ReaderBase(metaclass=ABCMeta):\n    @abstractmethod\n    def csv(self):\n        pass\n    @abstractmethod\n    def excel(self):",
        "detail": "get_sample.example.crime_abstract",
        "documentation": {}
    },
    {
        "label": "ReaderBase",
        "kind": 6,
        "importPath": "get_sample.example.crime_abstract",
        "description": "get_sample.example.crime_abstract",
        "peekOfCode": "class ReaderBase(metaclass=ABCMeta):\n    @abstractmethod\n    def csv(self):\n        pass\n    @abstractmethod\n    def excel(self):\n        pass\n    @abstractmethod\n    def json(self):\n        pass",
        "detail": "get_sample.example.crime_abstract",
        "documentation": {}
    },
    {
        "label": "ScraperBase",
        "kind": 6,
        "importPath": "get_sample.example.crime_abstract",
        "description": "get_sample.example.crime_abstract",
        "peekOfCode": "class ScraperBase(metaclass=ABCMeta):\n    @abstractmethod\n    def driver(self):\n        pass",
        "detail": "get_sample.example.crime_abstract",
        "documentation": {}
    },
    {
        "label": "CrimeServic",
        "kind": 6,
        "importPath": "get_sample.example.crime_service",
        "description": "get_sample.example.crime_service",
        "peekOfCode": "class CrimeService : \n    dataset = CrimeDataset()\n    model = CrimeModel()\n    reader = Reader()\n    def __init__(self) :\n        # self.okt = Okt()\n        self.data = self.dataset\n        this = self.data\n        this.dname = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\get_sample\\\\crime\\\\data\\\\'\n        this.sname = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\get_sample\\\\crime\\\\save\\\\'",
        "detail": "get_sample.example.crime_service",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "get_sample.example.crime_service",
        "description": "get_sample.example.crime_service",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nprint('*' *100)\n# print(BASE_DIR)\nload_dotenv(os.path.join(BASE_DIR, \".env\"))\n'''\n문제정의 !\n서울시의 범죄현황과 CCTV현황을 분석해서\n정해진 예산안에서 구별로 다음해에 배분하는 기준을 마련하시오.\n예산금액을 입력하면, 구당 할당되는 CCTV 카운터를 자동으로\n알려주는 AI 프로그램을 작성하시오.",
        "detail": "get_sample.example.crime_service",
        "documentation": {}
    },
    {
        "label": "Editor",
        "kind": 6,
        "importPath": "get_sample.example.crime_util",
        "description": "get_sample.example.crime_util",
        "peekOfCode": "class Editor(EditorBase):\n    def dropna(self,this:pd.DataFrame)->pd.DataFrame:\n        this.dropna(axis=0, inplace=True)\nclass Printer(PrinterBase):\n    def dframe(self, this:pd.DataFrame) -> None:\n        ic('*'*100)\n        ic(f'타입 : {type(this)}')\n        ic(f'column : {this.columns}')\n        ic(f'top 1 col : {this.head(1)}')\n        ic(f'null count : {this.isnul().sum()} 개')",
        "detail": "get_sample.example.crime_util",
        "documentation": {}
    },
    {
        "label": "Printer",
        "kind": 6,
        "importPath": "get_sample.example.crime_util",
        "description": "get_sample.example.crime_util",
        "peekOfCode": "class Printer(PrinterBase):\n    def dframe(self, this:pd.DataFrame) -> None:\n        ic('*'*100)\n        ic(f'타입 : {type(this)}')\n        ic(f'column : {this.columns}')\n        ic(f'top 1 col : {this.head(1)}')\n        ic(f'null count : {this.isnul().sum()} 개')\n        ic('*'*100)\nclass Reader(ReaderBase):\n    def __init__(self):",
        "detail": "get_sample.example.crime_util",
        "documentation": {}
    },
    {
        "label": "Reader",
        "kind": 6,
        "importPath": "get_sample.example.crime_util",
        "description": "get_sample.example.crime_util",
        "peekOfCode": "class Reader(ReaderBase):\n    def __init__(self):\n        pass\n    def csv(self,file) -> object:\n        return pd.read_csv(f'{file}',encoding='UTF-8', thousands=',')\n    def excel(self,file,header,usecols) -> object:\n        return pd.read_excel(f'{file}', header=header, usecols=usecols)\n    def json(self,file) -> object:\n        return json.load(open(f'{file}.json',encoding='UTF-8'))\n    def gmaps(self, api_key:str) -> object:",
        "detail": "get_sample.example.crime_util",
        "documentation": {}
    },
    {
        "label": "Scraper",
        "kind": 6,
        "importPath": "get_sample.example.crime_util",
        "description": "get_sample.example.crime_util",
        "peekOfCode": "class Scraper(ScraperBase):\n    def __init__(self):\n        pass\n    def driver(self, driver, url, selector, data) -> None:\n        return webdriver.Chrome('')\n    def auto_login(self, driver, url, selector, data) -> None:\n        driver.get(url)\n        driver.find_element_by_css_selector(selector).send_keys(data)\n        driver.find_element_by_css_selector(selector).submit()",
        "detail": "get_sample.example.crime_util",
        "documentation": {}
    },
    {
        "label": "Dice",
        "kind": 6,
        "importPath": "get_sample.example.dice",
        "description": "get_sample.example.dice",
        "peekOfCode": "class Dice:\n    def __init__(self, sides=6):\n        print(f'utils.py myRandom() 를 이용하여 주사위 객체를 생성합니다')",
        "detail": "get_sample.example.dice",
        "documentation": {}
    },
    {
        "label": "Grade",
        "kind": 6,
        "importPath": "get_sample.example.grade",
        "description": "get_sample.example.grade",
        "peekOfCode": "class Grade:\n    def __init__(self) -> None:\n        # 아래 주석된 부분을 완성합니다.\n        kor = myRandom(0,100)\n        eng = myRandom(0, 100)\n        math = myRandom(0, 100)\n        # sum = self.sum(kor, eng, math)\n        # avg = self.agv(kor, eng, math)\n        # grade = self.getGrade()\n        # passChk = self.passChk()",
        "detail": "get_sample.example.grade",
        "documentation": {}
    },
    {
        "label": "LeapYear",
        "kind": 6,
        "importPath": "get_sample.example.leap_year",
        "description": "get_sample.example.leap_year",
        "peekOfCode": "class LeapYear:\n    def __init__(self) -> None:\n        print(f'utils.py myRandom() 를 이용하여 윤년계산기 객체를 생성합니다')\n        print ('(ex) 2020년은 윤년입니다. 단 컴프리헨션을 사용합니다')\n    def is_leap_year(self):\n        y = myRandom(2000,2024)\n        s1 = '윤년' if( y%4==0 and y % 100!=0 ) else '평년'\n        s2 = '윤년' if ( y% 400 == 0 ) else '평년'\n        s = '윤년' if ((y%4==0 and y % 100!=0) or y% 400 == 0 ) else '평년'\n        print(f'{y}는 {s}다')",
        "detail": "get_sample.example.leap_year",
        "documentation": {}
    },
    {
        "label": "PopServic",
        "kind": 6,
        "importPath": "get_sample.example.population_serivce",
        "description": "get_sample.example.population_serivce",
        "peekOfCode": "class PopService : \n    dataset = CrimeDataset()\n    model = PopModel()\n    def __init__(self) :\n        self.data = self.dataset\n        this = self.data\n        this.dname = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\get_sample\\\\crime\\\\data\\\\'\n        this.sname = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\get_sample\\\\crime\\\\save\\\\'\n        this.pop = 'pop_in_seoul.xls'\n        self.pop_columns = \"B:B,D:D,G:G,J:J,N:N\"",
        "detail": "get_sample.example.population_serivce",
        "documentation": {}
    },
    {
        "label": "RPS",
        "kind": 6,
        "importPath": "get_sample.example.rps",
        "description": "get_sample.example.rps",
        "peekOfCode": "class RPS:\n    def __init__(self) -> None:\n        print(f'utils.py myRandom() 를 이용하여 가위바위보 객체를 생성합니다')\n    # def play(self):\n    #     c = myRandom(1,3)\n    #     p = input('가위', '바위', '보')\n    #     # 1: 가위, 2: 바위, 3: 보\n    #     rps = ['가위', '바위', '보']\n    #     if p == rps[c-1] :\n    #         print(f'컴퓨터: {rps[c-1]}, 당신 : {p}, 비겼습니다.')",
        "detail": "get_sample.example.rps",
        "documentation": {}
    },
    {
        "label": "SamsungRepor",
        "kind": 6,
        "importPath": "get_sample.example.samsung_report",
        "description": "get_sample.example.samsung_report",
        "peekOfCode": "class SamsungReport : \n    def __init__(self) :\n        self.okt = Okt()\n        self.data = DataModel()\n        self.data.dname = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\get_sample\\\\example\\\\data\\\\'\n        self.data.fname = 'kr-Report_2018.txt'\n        text = '코드잇에 오신 걸 환영합니다'\n        self.result = ''\n        # print(self.okt.morphs(text))\n    def preprocessing(self):",
        "detail": "get_sample.example.samsung_report",
        "documentation": {}
    },
    {
        "label": "strip_demo",
        "kind": 2,
        "importPath": "get_sample.example.strop_join_exam",
        "description": "get_sample.example.strop_join_exam",
        "peekOfCode": "def strip_demo():\n    s = \"   Hello World   \"\n    print(s.strip())\n    print(s.lstrip())\n    print(s.rstrip())\n    print('')\ndef join_demo():\n    s = ['H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd']\n    print(' '.join(s))\n    print(''.join(s))",
        "detail": "get_sample.example.strop_join_exam",
        "documentation": {}
    },
    {
        "label": "join_demo",
        "kind": 2,
        "importPath": "get_sample.example.strop_join_exam",
        "description": "get_sample.example.strop_join_exam",
        "peekOfCode": "def join_demo():\n    s = ['H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd']\n    print(' '.join(s))\n    print(''.join(s))\n    print(','.join(s))\n    print('')\ndef join_demo_2():\n    s = ['H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd']\n    tmp = '_'.join(s)\n    print(tmp)",
        "detail": "get_sample.example.strop_join_exam",
        "documentation": {}
    },
    {
        "label": "join_demo_2",
        "kind": 2,
        "importPath": "get_sample.example.strop_join_exam",
        "description": "get_sample.example.strop_join_exam",
        "peekOfCode": "def join_demo_2():\n    s = ['H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd']\n    tmp = '_'.join(s)\n    print(tmp)\n    print('')\ndef join_demo_3():\n    addr = \"\\n\".join(['서울시', '강남구', '역삼동','123-456'])\n    print(addr)\n    print('')\ndef split_demo():",
        "detail": "get_sample.example.strop_join_exam",
        "documentation": {}
    },
    {
        "label": "join_demo_3",
        "kind": 2,
        "importPath": "get_sample.example.strop_join_exam",
        "description": "get_sample.example.strop_join_exam",
        "peekOfCode": "def join_demo_3():\n    addr = \"\\n\".join(['서울시', '강남구', '역삼동','123-456'])\n    print(addr)\n    print('')\ndef split_demo():\n    s = \"Hello, World\"\n    print(s.split())\n    print(s.split(','))\n    print('')\ndef replace_demo():",
        "detail": "get_sample.example.strop_join_exam",
        "documentation": {}
    },
    {
        "label": "split_demo",
        "kind": 2,
        "importPath": "get_sample.example.strop_join_exam",
        "description": "get_sample.example.strop_join_exam",
        "peekOfCode": "def split_demo():\n    s = \"Hello, World\"\n    print(s.split())\n    print(s.split(','))\n    print('')\ndef replace_demo():\n    s = \"Hello, World\"\n    print(s.replace('World', 'Python'))\n    print('')\n# https://velog.io/@jaeyoung9849/strip-split-join",
        "detail": "get_sample.example.strop_join_exam",
        "documentation": {}
    },
    {
        "label": "replace_demo",
        "kind": 2,
        "importPath": "get_sample.example.strop_join_exam",
        "description": "get_sample.example.strop_join_exam",
        "peekOfCode": "def replace_demo():\n    s = \"Hello, World\"\n    print(s.replace('World', 'Python'))\n    print('')\n# https://velog.io/@jaeyoung9849/strip-split-join\nif __name__ == '__main__':\n    strip_demo()\n    join_demo()\n    join_demo_2()\n    join_demo_3()",
        "detail": "get_sample.example.strop_join_exam",
        "documentation": {}
    },
    {
        "label": "kiwoom",
        "kind": 5,
        "importPath": "get_sample.example.test_pyQt",
        "description": "get_sample.example.test_pyQt",
        "peekOfCode": "kiwoom = Kiwoom()\nkiwoom.CommConnect(block=True)\nrrr = kiwoom.GetMasterLastPrice(\"005930\")\nprint(int(rrr))\nprint(type(rrr))",
        "detail": "get_sample.example.test_pyQt",
        "documentation": {}
    },
    {
        "label": "rrr",
        "kind": 5,
        "importPath": "get_sample.example.test_pyQt",
        "description": "get_sample.example.test_pyQt",
        "peekOfCode": "rrr = kiwoom.GetMasterLastPrice(\"005930\")\nprint(int(rrr))\nprint(type(rrr))",
        "detail": "get_sample.example.test_pyQt",
        "documentation": {}
    },
    {
        "label": "Member",
        "kind": 6,
        "importPath": "get_sample.example.utils",
        "description": "get_sample.example.utils",
        "peekOfCode": "class Member:\n    name : str = ''\n    height : float =0\n    weight : float =0\n    @property\n    def name(self) -> str: return self._name\n    @name.setter\n    def name(self, name): self._name = name\n    @property\n    def height(self) -> float: return self._height",
        "detail": "get_sample.example.utils",
        "documentation": {}
    },
    {
        "label": "myRandom",
        "kind": 2,
        "importPath": "get_sample.example.utils",
        "description": "get_sample.example.utils",
        "peekOfCode": "def myRandom(start, end): return random.randint(start, end-1)\ndef my100(): return myRandom(1,100)\ndef memberlist() -> []:\n    return ['홍정명', '노홍주', '전종현', '정경준', '양정오',\n           \"권혜민\", \"서성민\", \"조현국\", \"김한슬\", \"김진영\",\n           '심민혜', '권솔이', '김지혜', '하진희', '최은아',\n           '최민서', '한성수', '김윤섭', '김승현',\n           \"강 민\", \"최건일\", \"유재혁\", \"김아름\", \"장원종\"]",
        "detail": "get_sample.example.utils",
        "documentation": {}
    },
    {
        "label": "my100",
        "kind": 2,
        "importPath": "get_sample.example.utils",
        "description": "get_sample.example.utils",
        "peekOfCode": "def my100(): return myRandom(1,100)\ndef memberlist() -> []:\n    return ['홍정명', '노홍주', '전종현', '정경준', '양정오',\n           \"권혜민\", \"서성민\", \"조현국\", \"김한슬\", \"김진영\",\n           '심민혜', '권솔이', '김지혜', '하진희', '최은아',\n           '최민서', '한성수', '김윤섭', '김승현',\n           \"강 민\", \"최건일\", \"유재혁\", \"김아름\", \"장원종\"]",
        "detail": "get_sample.example.utils",
        "documentation": {}
    },
    {
        "label": "memberlist",
        "kind": 2,
        "importPath": "get_sample.example.utils",
        "description": "get_sample.example.utils",
        "peekOfCode": "def memberlist() -> []:\n    return ['홍정명', '노홍주', '전종현', '정경준', '양정오',\n           \"권혜민\", \"서성민\", \"조현국\", \"김한슬\", \"김진영\",\n           '심민혜', '권솔이', '김지혜', '하진희', '최은아',\n           '최민서', '한성수', '김윤섭', '김승현',\n           \"강 민\", \"최건일\", \"유재혁\", \"김아름\", \"장원종\"]",
        "detail": "get_sample.example.utils",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "get_sample.main",
        "description": "get_sample.main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/api/sample/bmi\")\nasync def root():\n    result = BMI.getBMI()\n    return {\"answer\": \"bmi : {result}\"}\n@app.get(\"/api/sample/leapyear\")\nasync def root():\n    result = LeapYear.is_leap_year()\n    return {\"answer\": \"leapyear : {result}\"}\n@app.get(\"/api/sample/rps\")",
        "detail": "get_sample.main",
        "documentation": {}
    }
]