[
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "DataModel",
        "importPath": "context.model.data_model",
        "description": "context.model.data_model",
        "isExtraImport": true,
        "detail": "context.model.data_model",
        "documentation": {}
    },
    {
        "label": "DataModel",
        "importPath": "context.model.data_model",
        "description": "context.model.data_model",
        "isExtraImport": true,
        "detail": "context.model.data_model",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "CrimeDataset",
        "importPath": "crime.model.crime_dataset",
        "description": "crime.model.crime_dataset",
        "isExtraImport": true,
        "detail": "crime.model.crime_dataset",
        "documentation": {}
    },
    {
        "label": "CrimeDataset",
        "importPath": "crime.model.crime_dataset",
        "description": "crime.model.crime_dataset",
        "isExtraImport": true,
        "detail": "crime.model.crime_dataset",
        "documentation": {}
    },
    {
        "label": "CrimeModel",
        "importPath": "crime.model.crime_model",
        "description": "crime.model.crime_model",
        "isExtraImport": true,
        "detail": "crime.model.crime_model",
        "documentation": {}
    },
    {
        "label": "CrimeModel",
        "importPath": "crime.model.crime_model",
        "description": "crime.model.crime_model",
        "isExtraImport": true,
        "detail": "crime.model.crime_model",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "myRandom",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "Member",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "memberlist",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "myRandom",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "myRandom",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "myRandom",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "example.crime_util",
        "description": "example.crime_util",
        "isExtraImport": true,
        "detail": "example.crime_util",
        "documentation": {}
    },
    {
        "label": "Kkma",
        "importPath": "konlpy.tag",
        "description": "konlpy.tag",
        "isExtraImport": true,
        "detail": "konlpy.tag",
        "documentation": {}
    },
    {
        "label": "Komoran",
        "importPath": "konlpy.tag",
        "description": "konlpy.tag",
        "isExtraImport": true,
        "detail": "konlpy.tag",
        "documentation": {}
    },
    {
        "label": "Okt",
        "importPath": "konlpy.tag",
        "description": "konlpy.tag",
        "isExtraImport": true,
        "detail": "konlpy.tag",
        "documentation": {}
    },
    {
        "label": "Hannanum",
        "importPath": "konlpy.tag",
        "description": "konlpy.tag",
        "isExtraImport": true,
        "detail": "konlpy.tag",
        "documentation": {}
    },
    {
        "label": "Kkma",
        "importPath": "konlpy.tag",
        "description": "konlpy.tag",
        "isExtraImport": true,
        "detail": "konlpy.tag",
        "documentation": {}
    },
    {
        "label": "Komoran",
        "importPath": "konlpy.tag",
        "description": "konlpy.tag",
        "isExtraImport": true,
        "detail": "konlpy.tag",
        "documentation": {}
    },
    {
        "label": "Okt",
        "importPath": "konlpy.tag",
        "description": "konlpy.tag",
        "isExtraImport": true,
        "detail": "konlpy.tag",
        "documentation": {}
    },
    {
        "label": "Hannanum",
        "importPath": "konlpy.tag",
        "description": "konlpy.tag",
        "isExtraImport": true,
        "detail": "konlpy.tag",
        "documentation": {}
    },
    {
        "label": "ic",
        "importPath": "icecream",
        "description": "icecream",
        "isExtraImport": true,
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "ic",
        "importPath": "icecream",
        "description": "icecream",
        "isExtraImport": true,
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "ic",
        "importPath": "icecream",
        "description": "icecream",
        "isExtraImport": true,
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "konlpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "konlpy",
        "description": "konlpy",
        "detail": "konlpy",
        "documentation": {}
    },
    {
        "label": "nltk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk",
        "description": "nltk",
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "FreqDist",
        "importPath": "nltk",
        "description": "nltk",
        "isExtraImport": true,
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "tweepy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tweepy",
        "description": "tweepy",
        "detail": "tweepy",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "PrinterBase",
        "importPath": "example.crime_abstract",
        "description": "example.crime_abstract",
        "isExtraImport": true,
        "detail": "example.crime_abstract",
        "documentation": {}
    },
    {
        "label": "ReaderBase",
        "importPath": "example.crime_abstract",
        "description": "example.crime_abstract",
        "isExtraImport": true,
        "detail": "example.crime_abstract",
        "documentation": {}
    },
    {
        "label": "ScraperBase",
        "importPath": "example.crime_abstract",
        "description": "example.crime_abstract",
        "isExtraImport": true,
        "detail": "example.crime_abstract",
        "documentation": {}
    },
    {
        "label": "googlemaps",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "googlemaps",
        "description": "googlemaps",
        "detail": "googlemaps",
        "documentation": {}
    },
    {
        "label": "Kiwoom",
        "importPath": "pykiwoom.kiwoom",
        "description": "pykiwoom.kiwoom",
        "isExtraImport": true,
        "detail": "pykiwoom.kiwoom",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pykiwoom.kiwoom",
        "description": "pykiwoom.kiwoom",
        "isExtraImport": true,
        "detail": "pykiwoom.kiwoom",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "myRandom",
        "importPath": "example.utils",
        "description": "example.utils",
        "isExtraImport": true,
        "detail": "example.utils",
        "documentation": {}
    },
    {
        "label": "word_tokenize",
        "importPath": "nltk.tokenize",
        "description": "nltk.tokenize",
        "isExtraImport": true,
        "detail": "nltk.tokenize",
        "documentation": {}
    },
    {
        "label": "WordCloud",
        "importPath": "wordcloud",
        "description": "wordcloud",
        "isExtraImport": true,
        "detail": "wordcloud",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "BMI",
        "importPath": "example.bmi",
        "description": "example.bmi",
        "isExtraImport": true,
        "detail": "example.bmi",
        "documentation": {}
    },
    {
        "label": "LeapYear",
        "importPath": "example.leap_year",
        "description": "example.leap_year",
        "isExtraImport": true,
        "detail": "example.leap_year",
        "documentation": {}
    },
    {
        "label": "RPS",
        "importPath": "get_sample.example.rps",
        "description": "get_sample.example.rps",
        "isExtraImport": true,
        "detail": "get_sample.example.rps",
        "documentation": {}
    },
    {
        "label": "DataModel",
        "kind": 6,
        "importPath": "context.model.data_model",
        "description": "context.model.data_model",
        "peekOfCode": "class DataModel:\n    _dname : str = ''\n    _sname : str = ''\n    _fname : str = ''\n    _train : str = ''\n    _test : str = ''\n    _id : str = ''\n    _label : str = ''\n    @property\n    def dname(self) -> str : return self._dname",
        "detail": "context.model.data_model",
        "documentation": {}
    },
    {
        "label": "MemberModel",
        "kind": 6,
        "importPath": "context.model.member_model",
        "description": "context.model.member_model",
        "peekOfCode": "class MemberModel:\n    _name : str = ''\n    _height : float = 0.0\n    _weight : float = 0.0\n    @property\n    def name(self) -> str: return self._name\n    @name.setter\n    def name(self, name: str): self._name = name\n    @property\n    def height(self) -> float: return self._height",
        "detail": "context.model.member_model",
        "documentation": {}
    },
    {
        "label": "DataService",
        "kind": 6,
        "importPath": "context.service.data_service",
        "description": "context.service.data_service",
        "peekOfCode": "class DataService:\n    def __init__(self):\n        self.data = DataModel()\n        this = self.data\n        this.dname = './data/'\n        this.sname = './save/'\n    def get_sname(self):\n        return self.data.sname\n    def new_dframe_idx(self, fname: str) -> object:\n        this = self.data",
        "detail": "context.service.data_service",
        "documentation": {}
    },
    {
        "label": "CrimeDataset",
        "kind": 6,
        "importPath": "crime.model.crime_dataset",
        "description": "crime.model.crime_dataset",
        "peekOfCode": "class CrimeDataset:\n    _dname : str = ''\n    _sname : str = ''\n    _fname : str = ''\n    _cctv : str = ''\n    _cctv20 : str = ''\n    _crime : str = ''\n    _police : str = ''\n    _unemployment : str = ''\n    _id : str = ''",
        "detail": "crime.model.crime_dataset",
        "documentation": {}
    },
    {
        "label": "CrimeModel",
        "kind": 6,
        "importPath": "crime.model.crime_model",
        "description": "crime.model.crime_model",
        "peekOfCode": "class CrimeModel:\n    def __init__(self) -> None:\n        self.ds = CrimeDataset()\n        this = self.ds\n        this.dname = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\get_sample\\\\crime\\\\data\\\\'\n        this.sname = './crime/save/'\n    def new_dataframe_with_index(self, fname: pd.DataFrame) -> pd.DataFrame:\n        this = self.ds\n        # index_col=0 해야 기존 index 값이 유지된다. \n        # 0은 컬럼명 중에서 첫번째를 의미한다.(배열구조)",
        "detail": "crime.model.crime_model",
        "documentation": {}
    },
    {
        "label": "CrimeService",
        "kind": 6,
        "importPath": "crime.service.crime_service",
        "description": "crime.service.crime_service",
        "peekOfCode": "class CrimeService:\n    def __init__(self):\n        self.data = CrimeModel()\n        this = self.data\n        this.dname = './data/'\n        this.sname = './save/'\n    def get_sname(self):\n        return self.data.sname\n    def new_dframe_idx(self, fname: str) -> object:\n        this = self.data",
        "detail": "crime.service.crime_service",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "example.bit_bank",
        "description": "example.bit_bank",
        "peekOfCode": "class Account:\n    def __init__(self, name, account_number, money) -> None:\n        '''\n        [요구사항(RFP)]\n        은행이름은 비트은행이다.\n        입금자 이름(name), 계좌번호(account_number), 금액(money) 속성값으로 계좌를 생성한다.\n        계좌번호는 3자리-2자리-6자리 형태로 랜덤하게 생성된다.\n        예를들면 123-12-123456 이다.\n        금액은 100 ~ 999 사이로 랜덤하게 입금된다. (단위는 만단위로 암묵적으로 판단한다)\n        '''",
        "detail": "example.bit_bank",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "example.bit_bank",
        "description": "example.bit_bank",
        "peekOfCode": "today = datetime.datetime.now()\nclass Account:\n    def __init__(self, name, account_number, money) -> None:\n        '''\n        [요구사항(RFP)]\n        은행이름은 비트은행이다.\n        입금자 이름(name), 계좌번호(account_number), 금액(money) 속성값으로 계좌를 생성한다.\n        계좌번호는 3자리-2자리-6자리 형태로 랜덤하게 생성된다.\n        예를들면 123-12-123456 이다.\n        금액은 100 ~ 999 사이로 랜덤하게 입금된다. (단위는 만단위로 암묵적으로 판단한다)",
        "detail": "example.bit_bank",
        "documentation": {}
    },
    {
        "label": "BMI",
        "kind": 6,
        "importPath": "example.bmi",
        "description": "example.bmi",
        "peekOfCode": "class BMI():\n    member = Member()\n    def __init__(self) -> None:\n        '''utils.py / Members(), myRandom() 를 이용하여 BMI 지수를 구하는 계산기를 작성합니다.'''\n    def getgetBMI(self, height, weight) :\n        this = self.member\n        print(f'여기까지 ㅇㅋ')\n        this = self.create_rows(this)\n        print(f'여기까지 ㅇㅋ')\n        print(f'여기까지 ㅇㅋ')",
        "detail": "example.bmi",
        "documentation": {}
    },
    {
        "label": "Calculator",
        "kind": 6,
        "importPath": "example.calculator",
        "description": "example.calculator",
        "peekOfCode": "class Calculator:\n    def __init__(self, a, opcode, b):\n        print(f'utils.py / myRandom() 을 이용하여 자동 랜덤 계산기를 생성합니다')\n        print('(ex) 5 + 4 = 9')",
        "detail": "example.calculator",
        "documentation": {}
    },
    {
        "label": "BugsMusic",
        "kind": 6,
        "importPath": "example.crawling",
        "description": "example.crawling",
        "peekOfCode": "class BugsMusic(object):\n    def __init__(self) -> None:\n        self.url = 'https://music.bugs.co.kr/chart/track/realtime/total?'\n        self.headers = {'User-Agent': 'Mozilla/5.0'}\n        self.class_name = []\n        self.title_list = []\n        self.artist_list = []\n        self.dict = {}\n    def set_url(self, detail):\n        self.url = requests.get(f'{self.url}{detail}', headers=self.headers).text",
        "detail": "example.crawling",
        "documentation": {}
    },
    {
        "label": "ScrapBugs",
        "kind": 6,
        "importPath": "example.crawling2",
        "description": "example.crawling2",
        "peekOfCode": "class ScrapBugs(object):\n    def __init__(self) -> None:\n        pass\n    def scrap(self) -> {}:\n        print('벅스 뮤직 사이트에서 데이터를 수집합니다.')\n        url = 'https://music.bugs.co.kr/chart/track/realtime/total?'\n        html_doc = urlopen(url)\n        soup = BeautifulSoup(html_doc, 'lxml')\n        list1 = self.find_music(soup,'title')\n        list2 = self.find_music(soup,'artist')",
        "detail": "example.crawling2",
        "documentation": {}
    },
    {
        "label": "PrinterBase",
        "kind": 6,
        "importPath": "example.crime_abstract",
        "description": "example.crime_abstract",
        "peekOfCode": "class PrinterBase(metaclass=ABCMeta):\n    @abstractmethod\n    def print(self):\n        pass\nclass ReaderBase(PrinterBase):\n    @abstractmethod\n    def csv(self):\n        pass\n    @abstractmethod\n    def xls(self):",
        "detail": "example.crime_abstract",
        "documentation": {}
    },
    {
        "label": "ReaderBase",
        "kind": 6,
        "importPath": "example.crime_abstract",
        "description": "example.crime_abstract",
        "peekOfCode": "class ReaderBase(PrinterBase):\n    @abstractmethod\n    def csv(self):\n        pass\n    @abstractmethod\n    def xls(self):\n        pass\n    @abstractmethod\n    def json(self):\n        pass",
        "detail": "example.crime_abstract",
        "documentation": {}
    },
    {
        "label": "ScraperBase",
        "kind": 6,
        "importPath": "example.crime_abstract",
        "description": "example.crime_abstract",
        "peekOfCode": "class ScraperBase(metaclass=ABCMeta):\n    @abstractmethod\n    def driver(self):\n        pass",
        "detail": "example.crime_abstract",
        "documentation": {}
    },
    {
        "label": "CrimeServic",
        "kind": 6,
        "importPath": "example.crime_service",
        "description": "example.crime_service",
        "peekOfCode": "class CrimeService : \n    dataset = CrimeDataset()\n    model = CrimeModel()\n    def __init__(self) :\n        # self.okt = Okt()\n        self.data = CrimeModel()\n        self.data.dname = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\get_sample\\\\crime\\\\data\\\\'\n        self.data.sname = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\get_sample\\\\crime\\\\seve\\\\'\n        self.data.cctv = 'cctv_in_seoul.csv'\n        self.data.crime = 'cctv_in_seoul.csv'",
        "detail": "example.crime_service",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "example.crime_service",
        "description": "example.crime_service",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nload_dotenv(os.path.join(BASE_DIR,\".env\"))\nclass CrimeService : \n    dataset = CrimeDataset()\n    model = CrimeModel()\n    def __init__(self) :\n        # self.okt = Okt()\n        self.data = CrimeModel()\n        self.data.dname = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\get_sample\\\\crime\\\\data\\\\'\n        self.data.sname = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\get_sample\\\\crime\\\\seve\\\\'",
        "detail": "example.crime_service",
        "documentation": {}
    },
    {
        "label": "Printer",
        "kind": 6,
        "importPath": "example.crime_util",
        "description": "example.crime_util",
        "peekOfCode": "class Printer(PrinterBase):\n    def dframe(self, this:pd.DataFrame) -> None:\n        ic('*'*100)\n        ic(f'타입 : {type(this)}')\n        ic(f'column : {this.columns}')\n        ic(f'top 1 col : {this.head(1)}')\n        ic(f'null count : {this.isnul().sum()} 개')\n        ic('*'*100)\nclass Reader(ReaderBase):\n    def __init__(self):",
        "detail": "example.crime_util",
        "documentation": {}
    },
    {
        "label": "Reader",
        "kind": 6,
        "importPath": "example.crime_util",
        "description": "example.crime_util",
        "peekOfCode": "class Reader(ReaderBase):\n    def __init__(self):\n        pass\n    def csv(self,file) -> object:\n        return pd.read_csv(f'{file}',encoding='UTF-8', thousands=',')\n    def xls(self,file,header,usecols) -> object:\n        return pd.read_csv(f'{file}', header=header, usecols=usecols)\n    def json(self,file) -> object:\n        return json.load(open(f'{file}.json',encoding='UTF-8'))\n    def gmaps(self) -> object:",
        "detail": "example.crime_util",
        "documentation": {}
    },
    {
        "label": "Scraper",
        "kind": 6,
        "importPath": "example.crime_util",
        "description": "example.crime_util",
        "peekOfCode": "class Scraper(ScraperBase):\n    def __init__(self):\n        pass\n    def driver(self, driver, url, selector, data) -> None:\n        return webdriver.Chrome('')\n    def auto_login(self, driver, url, selector, data) -> None:\n        driver.get(url)\n        driver.find_element_by_css_selector(selector).send_keys(data)\n        driver.find_element_by_css_selector(selector).submit()",
        "detail": "example.crime_util",
        "documentation": {}
    },
    {
        "label": "Dice",
        "kind": 6,
        "importPath": "example.dice",
        "description": "example.dice",
        "peekOfCode": "class Dice:\n    def __init__(self, sides=6):\n        print(f'utils.py myRandom() 를 이용하여 주사위 객체를 생성합니다')",
        "detail": "example.dice",
        "documentation": {}
    },
    {
        "label": "Grade",
        "kind": 6,
        "importPath": "example.grade",
        "description": "example.grade",
        "peekOfCode": "class Grade:\n    def __init__(self) -> None:\n        # 아래 주석된 부분을 완성합니다.\n        kor = myRandom(0,100)\n        eng = myRandom(0, 100)\n        math = myRandom(0, 100)\n        # sum = self.sum(kor, eng, math)\n        # avg = self.agv(kor, eng, math)\n        # grade = self.getGrade()\n        # passChk = self.passChk()",
        "detail": "example.grade",
        "documentation": {}
    },
    {
        "label": "LeapYear",
        "kind": 6,
        "importPath": "example.leap_year",
        "description": "example.leap_year",
        "peekOfCode": "class LeapYear:\n    def __init__(self) -> None:\n        print(f'utils.py myRandom() 를 이용하여 윤년계산기 객체를 생성합니다')\n        print ('(ex) 2020년은 윤년입니다. 단 컴프리헨션을 사용합니다')\n    def is_leap_year(self):\n        y = myRandom(2000,2024)\n        s1 = '윤년' if( y%4==0 and y % 100!=0 ) else '평년'\n        s2 = '윤년' if ( y% 400 == 0 ) else '평년'\n        s = '윤년' if ((y%4==0 and y % 100!=0) or y% 400 == 0 ) else '평년'\n        print(f'{y}는 {s}다')",
        "detail": "example.leap_year",
        "documentation": {}
    },
    {
        "label": "RPS",
        "kind": 6,
        "importPath": "example.rps",
        "description": "example.rps",
        "peekOfCode": "class RPS:\n    def __init__(self) -> None:\n        print(f'utils.py myRandom() 를 이용하여 가위바위보 객체를 생성합니다')\n    # def play(self):\n    #     c = myRandom(1,3)\n    #     p = input('가위', '바위', '보')\n    #     # 1: 가위, 2: 바위, 3: 보\n    #     rps = ['가위', '바위', '보']\n    #     if p == rps[c-1] :\n    #         print(f'컴퓨터: {rps[c-1]}, 당신 : {p}, 비겼습니다.')",
        "detail": "example.rps",
        "documentation": {}
    },
    {
        "label": "SamsungRepor",
        "kind": 6,
        "importPath": "example.samsung_report",
        "description": "example.samsung_report",
        "peekOfCode": "class SamsungReport : \n    def __init__(self) :\n        self.okt = Okt()\n        self.data = DataModel()\n        self.data.dname = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\get_sample\\\\example\\\\data\\\\'\n        self.data.fname = 'kr-Report_2018.txt'\n        text = '코드잇에 오신 걸 환영합니다'\n        self.result = ''\n        # print(self.okt.morphs(text))\n    def preprocessing(self):",
        "detail": "example.samsung_report",
        "documentation": {}
    },
    {
        "label": "strip_demo",
        "kind": 2,
        "importPath": "example.strop_join_exam",
        "description": "example.strop_join_exam",
        "peekOfCode": "def strip_demo():\n    s = \"   Hello World   \"\n    print(s.strip())\n    print(s.lstrip())\n    print(s.rstrip())\n    print('')\ndef join_demo():\n    s = ['H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd']\n    print(' '.join(s))\n    print(''.join(s))",
        "detail": "example.strop_join_exam",
        "documentation": {}
    },
    {
        "label": "join_demo",
        "kind": 2,
        "importPath": "example.strop_join_exam",
        "description": "example.strop_join_exam",
        "peekOfCode": "def join_demo():\n    s = ['H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd']\n    print(' '.join(s))\n    print(''.join(s))\n    print(','.join(s))\n    print('')\ndef join_demo_2():\n    s = ['H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd']\n    tmp = '_'.join(s)\n    print(tmp)",
        "detail": "example.strop_join_exam",
        "documentation": {}
    },
    {
        "label": "join_demo_2",
        "kind": 2,
        "importPath": "example.strop_join_exam",
        "description": "example.strop_join_exam",
        "peekOfCode": "def join_demo_2():\n    s = ['H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd']\n    tmp = '_'.join(s)\n    print(tmp)\n    print('')\ndef join_demo_3():\n    addr = \"\\n\".join(['서울시', '강남구', '역삼동','123-456'])\n    print(addr)\n    print('')\ndef split_demo():",
        "detail": "example.strop_join_exam",
        "documentation": {}
    },
    {
        "label": "join_demo_3",
        "kind": 2,
        "importPath": "example.strop_join_exam",
        "description": "example.strop_join_exam",
        "peekOfCode": "def join_demo_3():\n    addr = \"\\n\".join(['서울시', '강남구', '역삼동','123-456'])\n    print(addr)\n    print('')\ndef split_demo():\n    s = \"Hello, World\"\n    print(s.split())\n    print(s.split(','))\n    print('')\ndef replace_demo():",
        "detail": "example.strop_join_exam",
        "documentation": {}
    },
    {
        "label": "split_demo",
        "kind": 2,
        "importPath": "example.strop_join_exam",
        "description": "example.strop_join_exam",
        "peekOfCode": "def split_demo():\n    s = \"Hello, World\"\n    print(s.split())\n    print(s.split(','))\n    print('')\ndef replace_demo():\n    s = \"Hello, World\"\n    print(s.replace('World', 'Python'))\n    print('')\n# https://velog.io/@jaeyoung9849/strip-split-join",
        "detail": "example.strop_join_exam",
        "documentation": {}
    },
    {
        "label": "replace_demo",
        "kind": 2,
        "importPath": "example.strop_join_exam",
        "description": "example.strop_join_exam",
        "peekOfCode": "def replace_demo():\n    s = \"Hello, World\"\n    print(s.replace('World', 'Python'))\n    print('')\n# https://velog.io/@jaeyoung9849/strip-split-join\nif __name__ == '__main__':\n    strip_demo()\n    join_demo()\n    join_demo_2()\n    join_demo_3()",
        "detail": "example.strop_join_exam",
        "documentation": {}
    },
    {
        "label": "kiwoom",
        "kind": 5,
        "importPath": "example.test_pyQt",
        "description": "example.test_pyQt",
        "peekOfCode": "kiwoom = Kiwoom()\nkiwoom.CommConnect(block=True)\nrrr = kiwoom.GetMasterLastPrice(\"005930\")\nprint(int(rrr))\nprint(type(rrr))",
        "detail": "example.test_pyQt",
        "documentation": {}
    },
    {
        "label": "rrr",
        "kind": 5,
        "importPath": "example.test_pyQt",
        "description": "example.test_pyQt",
        "peekOfCode": "rrr = kiwoom.GetMasterLastPrice(\"005930\")\nprint(int(rrr))\nprint(type(rrr))",
        "detail": "example.test_pyQt",
        "documentation": {}
    },
    {
        "label": "Member",
        "kind": 6,
        "importPath": "example.utils",
        "description": "example.utils",
        "peekOfCode": "class Member:\n    name : str = ''\n    height : float =0\n    weight : float =0\n    @property\n    def name(self) -> str: return self._name\n    @name.setter\n    def name(self, name): self._name = name\n    @property\n    def height(self) -> float: return self._height",
        "detail": "example.utils",
        "documentation": {}
    },
    {
        "label": "myRandom",
        "kind": 2,
        "importPath": "example.utils",
        "description": "example.utils",
        "peekOfCode": "def myRandom(start, end): return random.randint(start, end-1)\ndef my100(): return myRandom(1,100)\ndef memberlist() -> []:\n    return ['홍정명', '노홍주', '전종현', '정경준', '양정오',\n           \"권혜민\", \"서성민\", \"조현국\", \"김한슬\", \"김진영\",\n           '심민혜', '권솔이', '김지혜', '하진희', '최은아',\n           '최민서', '한성수', '김윤섭', '김승현',\n           \"강 민\", \"최건일\", \"유재혁\", \"김아름\", \"장원종\"]",
        "detail": "example.utils",
        "documentation": {}
    },
    {
        "label": "my100",
        "kind": 2,
        "importPath": "example.utils",
        "description": "example.utils",
        "peekOfCode": "def my100(): return myRandom(1,100)\ndef memberlist() -> []:\n    return ['홍정명', '노홍주', '전종현', '정경준', '양정오',\n           \"권혜민\", \"서성민\", \"조현국\", \"김한슬\", \"김진영\",\n           '심민혜', '권솔이', '김지혜', '하진희', '최은아',\n           '최민서', '한성수', '김윤섭', '김승현',\n           \"강 민\", \"최건일\", \"유재혁\", \"김아름\", \"장원종\"]",
        "detail": "example.utils",
        "documentation": {}
    },
    {
        "label": "memberlist",
        "kind": 2,
        "importPath": "example.utils",
        "description": "example.utils",
        "peekOfCode": "def memberlist() -> []:\n    return ['홍정명', '노홍주', '전종현', '정경준', '양정오',\n           \"권혜민\", \"서성민\", \"조현국\", \"김한슬\", \"김진영\",\n           '심민혜', '권솔이', '김지혜', '하진희', '최은아',\n           '최민서', '한성수', '김윤섭', '김승현',\n           \"강 민\", \"최건일\", \"유재혁\", \"김아름\", \"장원종\"]",
        "detail": "example.utils",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/api/sample/bmi\")\nasync def root():\n    result = BMI.getBMI()\n    return {\"answer\": \"bmi : {result}\"}\n@app.get(\"/api/sample/leapyear\")\nasync def root():\n    result = LeapYear.is_leap_year()\n    return {\"answer\": \"leapyear : {result}\"}\n@app.get(\"/api/sample/rps\")",
        "detail": "main",
        "documentation": {}
    }
]