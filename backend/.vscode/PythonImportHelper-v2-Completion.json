[
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "DataSets",
        "importPath": "app.api.context.data_sets",
        "description": "app.api.context.data_sets",
        "isExtraImport": true,
        "detail": "app.api.context.data_sets",
        "documentation": {}
    },
    {
        "label": "DataSets",
        "importPath": "app.api.context.data_sets",
        "description": "app.api.context.data_sets",
        "isExtraImport": true,
        "detail": "app.api.context.data_sets",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "RandomForestClassifier",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "KFold",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "cross_val_score",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "app.api.context.models",
        "description": "app.api.context.models",
        "isExtraImport": true,
        "detail": "app.api.context.models",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "xarray",
        "description": "xarray",
        "isExtraImport": true,
        "detail": "xarray",
        "documentation": {}
    },
    {
        "label": "TitanicModel",
        "importPath": "app.api.titanic.model.titanic_model",
        "description": "app.api.titanic.model.titanic_model",
        "isExtraImport": true,
        "detail": "app.api.titanic.model.titanic_model",
        "documentation": {}
    },
    {
        "label": "TitanicModel",
        "importPath": "app.api.titanic.model.titanic_model",
        "description": "app.api.titanic.model.titanic_model",
        "isExtraImport": true,
        "detail": "app.api.titanic.model.titanic_model",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "TitanicService",
        "importPath": "app.api.titanic.service.titanic_service",
        "description": "app.api.titanic.service.titanic_service",
        "isExtraImport": true,
        "detail": "app.api.titanic.service.titanic_service",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.titanic.web.titanic_router",
        "description": "app.api.titanic.web.titanic_router",
        "isExtraImport": true,
        "detail": "app.api.titanic.web.titanic_router",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain.chat_models.openai",
        "description": "langchain.chat_models.openai",
        "isExtraImport": true,
        "detail": "langchain.chat_models.openai",
        "documentation": {}
    },
    {
        "label": "HumanMessage",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "AIMessage",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "SystemMessage",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.main_router",
        "description": "app.main_router",
        "isExtraImport": true,
        "detail": "app.main_router",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "starlette.middleware.cors",
        "description": "starlette.middleware.cors",
        "isExtraImport": true,
        "detail": "starlette.middleware.cors",
        "documentation": {}
    },
    {
        "label": "DataSets",
        "kind": 6,
        "importPath": "app.api.context.data_sets",
        "description": "app.api.context.data_sets",
        "peekOfCode": "class DataSets:\n    _fname : str = '' # file name\n    _dname : str = '' # data path\n    _sname : str = '' # save path\n    _train : object = None\n    _test : object = None\n    _id : str = ''\n    _label : str = ''\n    @property\n    def fname(self) -> str: return self._fname",
        "detail": "app.api.context.data_sets",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 6,
        "importPath": "app.api.context.models",
        "description": "app.api.context.models",
        "peekOfCode": "class models:\n    def __init__(self) -> None:\n        self.ds = DataSets()\n        this = self.ds\n        this.dname = './app/api/titanic/data/'\n        this.sname = './app/api/titanic/save/'\n    def new_dataframe_with_index(self, fname: pd.DataFrame) -> pd.DataFrame:\n        this = self.ds\n        # index_col=0 해야 기존 index 값이 유지된다. \n        # 0은 컬럼명 중에서 첫번째를 의미한다.(배열구조)",
        "detail": "app.api.context.models",
        "documentation": {}
    },
    {
        "label": "1st",
        "kind": 5,
        "importPath": "app.api.titanic.model.titanic_feature",
        "description": "app.api.titanic.model.titanic_feature",
        "peekOfCode": "1st = Upper\n2nd = Middle\n3rd = Lower\nage: Age is fractional if less than 1.\nIf the age is estimated, is it in the form of xx.5\nsibsp: The dataset defines family relations in this way...\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fiancés were ignored)\nparch: The dataset defines family relations in this way...\nParent = mother, father",
        "detail": "app.api.titanic.model.titanic_feature",
        "documentation": {}
    },
    {
        "label": "2nd",
        "kind": 5,
        "importPath": "app.api.titanic.model.titanic_feature",
        "description": "app.api.titanic.model.titanic_feature",
        "peekOfCode": "2nd = Middle\n3rd = Lower\nage: Age is fractional if less than 1.\nIf the age is estimated, is it in the form of xx.5\nsibsp: The dataset defines family relations in this way...\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fiancés were ignored)\nparch: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson",
        "detail": "app.api.titanic.model.titanic_feature",
        "documentation": {}
    },
    {
        "label": "3rd",
        "kind": 5,
        "importPath": "app.api.titanic.model.titanic_feature",
        "description": "app.api.titanic.model.titanic_feature",
        "peekOfCode": "3rd = Lower\nage: Age is fractional if less than 1.\nIf the age is estimated, is it in the form of xx.5\nsibsp: The dataset defines family relations in this way...\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fiancés were ignored)\nparch: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.",
        "detail": "app.api.titanic.model.titanic_feature",
        "documentation": {}
    },
    {
        "label": "Sibling",
        "kind": 5,
        "importPath": "app.api.titanic.model.titanic_feature",
        "description": "app.api.titanic.model.titanic_feature",
        "peekOfCode": "Sibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fiancés were ignored)\nparch: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.\n컬럼(column) = 변수(variable) = 피처(feature)\n'Survived', --> label\n'Pclass',\n'Name',",
        "detail": "app.api.titanic.model.titanic_feature",
        "documentation": {}
    },
    {
        "label": "Spouse",
        "kind": 5,
        "importPath": "app.api.titanic.model.titanic_feature",
        "description": "app.api.titanic.model.titanic_feature",
        "peekOfCode": "Spouse = husband, wife (mistresses and fiancés were ignored)\nparch: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.\n컬럼(column) = 변수(variable) = 피처(feature)\n'Survived', --> label\n'Pclass',\n'Name',\n'Sex',",
        "detail": "app.api.titanic.model.titanic_feature",
        "documentation": {}
    },
    {
        "label": "Parent",
        "kind": 5,
        "importPath": "app.api.titanic.model.titanic_feature",
        "description": "app.api.titanic.model.titanic_feature",
        "peekOfCode": "Parent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.\n컬럼(column) = 변수(variable) = 피처(feature)\n'Survived', --> label\n'Pclass',\n'Name',\n'Sex',\n'Age',\n'SibSp',",
        "detail": "app.api.titanic.model.titanic_feature",
        "documentation": {}
    },
    {
        "label": "Child",
        "kind": 5,
        "importPath": "app.api.titanic.model.titanic_feature",
        "description": "app.api.titanic.model.titanic_feature",
        "peekOfCode": "Child = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.\n컬럼(column) = 변수(variable) = 피처(feature)\n'Survived', --> label\n'Pclass',\n'Name',\n'Sex',\n'Age',\n'SibSp',\n'Parch',",
        "detail": "app.api.titanic.model.titanic_feature",
        "documentation": {}
    },
    {
        "label": "컬럼(column)",
        "kind": 5,
        "importPath": "app.api.titanic.model.titanic_feature",
        "description": "app.api.titanic.model.titanic_feature",
        "peekOfCode": "컬럼(column) = 변수(variable) = 피처(feature)\n'Survived', --> label\n'Pclass',\n'Name',\n'Sex',\n'Age',\n'SibSp',\n'Parch',\n'Ticket',\n'Fare',",
        "detail": "app.api.titanic.model.titanic_feature",
        "documentation": {}
    },
    {
        "label": "TitanicModel",
        "kind": 6,
        "importPath": "app.api.titanic.model.titanic_model",
        "description": "app.api.titanic.model.titanic_model",
        "peekOfCode": "class TitanicModel(object):\n    model = models()\n    dataset = DataSets()\n    def preprocess(self, train_fname, test_fname) -> object:\n        this = self.dataset\n        that = self.model\n        feature = ['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\n        # 데이터셋은 Train과 Test, Validation 3종류로 나뉘어져 있다.\n        this.train = that.new_dataframe_no_index(train_fname)\n        this.test = that.new_dataframe_no_index(test_fname)",
        "detail": "app.api.titanic.model.titanic_model",
        "documentation": {}
    },
    {
        "label": "TitanicService",
        "kind": 6,
        "importPath": "app.api.titanic.service.titanic_service",
        "description": "app.api.titanic.service.titanic_service",
        "peekOfCode": "class TitanicService:\n    model = TitanicModel()\n    def preprocess(self) :\n        print(f'전처리 시작')\n        self.model.preprocess('train.csv', 'test.csv')\n    def modeling(self):\n        print(f'모델링 시작')\n        this = self.model\n    def learning(self):\n        print(f'학습 시작')",
        "detail": "app.api.titanic.service.titanic_service",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 6,
        "importPath": "app.api.titanic.web.titanic_router",
        "description": "app.api.titanic.web.titanic_router",
        "peekOfCode": "class Request(BaseModel):\n    question :str\nclass Response(BaseModel):\n    answer :str\n@router.post(\"/titanic\")\nasync def titanic(req:Request):\n    print(\"titanic 진입완1\")\n    hello = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\backend\\\\app\\\\api\\\\titanic\\\\data\\\\hellow.txt'\n    f = open(hello, \"r\", encoding=\"utf-8\")\n    data = f.read()",
        "detail": "app.api.titanic.web.titanic_router",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "app.api.titanic.web.titanic_router",
        "description": "app.api.titanic.web.titanic_router",
        "peekOfCode": "class Response(BaseModel):\n    answer :str\n@router.post(\"/titanic\")\nasync def titanic(req:Request):\n    print(\"titanic 진입완1\")\n    hello = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\backend\\\\app\\\\api\\\\titanic\\\\data\\\\hellow.txt'\n    f = open(hello, \"r\", encoding=\"utf-8\")\n    data = f.read()\n    print(data)\n    f.close()",
        "detail": "app.api.titanic.web.titanic_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.titanic.web.titanic_router",
        "description": "app.api.titanic.web.titanic_router",
        "peekOfCode": "router = APIRouter()\nservice = TitanicService()\nclass Request(BaseModel):\n    question :str\nclass Response(BaseModel):\n    answer :str\n@router.post(\"/titanic\")\nasync def titanic(req:Request):\n    print(\"titanic 진입완1\")\n    hello = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\backend\\\\app\\\\api\\\\titanic\\\\data\\\\hellow.txt'",
        "detail": "app.api.titanic.web.titanic_router",
        "documentation": {}
    },
    {
        "label": "service",
        "kind": 5,
        "importPath": "app.api.titanic.web.titanic_router",
        "description": "app.api.titanic.web.titanic_router",
        "peekOfCode": "service = TitanicService()\nclass Request(BaseModel):\n    question :str\nclass Response(BaseModel):\n    answer :str\n@router.post(\"/titanic\")\nasync def titanic(req:Request):\n    print(\"titanic 진입완1\")\n    hello = 'C:\\\\Users\\\\bitcamp\\\\TuringTeamPJT\\\\langchain\\\\backend\\\\app\\\\api\\\\titanic\\\\data\\\\hellow.txt'\n    f = open(hello, \"r\", encoding=\"utf-8\")",
        "detail": "app.api.titanic.web.titanic_router",
        "documentation": {}
    },
    {
        "label": "특성변수",
        "kind": 5,
        "importPath": "app.basic.ml_algorithm_10",
        "description": "app.basic.ml_algorithm_10",
        "peekOfCode": "특성변수 = 독립변수 = 외생변수 = x변수\n목적변수 \n'''",
        "detail": "app.basic.ml_algorithm_10",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.main_router",
        "description": "app.main_router",
        "peekOfCode": "router = APIRouter()\nrouter.include_router(titanic_router, prefix=\"/chat\")",
        "detail": "app.main_router",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Request(BaseModel):\n    question: str\nclass Response(BaseModel):\n    answer: str\nllm = ChatOpenAI(openai_api_key=\"...\")\napp = FastAPI()\napp.include_router(router, prefix=\"/api\")\norigins = [\n    \"*\"\n]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Response(BaseModel):\n    answer: str\nllm = ChatOpenAI(openai_api_key=\"...\")\napp = FastAPI()\napp.include_router(router, prefix=\"/api\")\norigins = [\n    \"*\"\n]\napp.add_middleware(\n    CORSMiddleware,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "chatting",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def chatting(req:Request):\n    print(req)\n    chat= ChatOpenAI(\n        openai_api_key=os.environ[\"api_key\"],\n        temperature=0.1,\n        max_tokens=2048,\n        model_name = 'gpt-3.5-turbo-0613'\n    )\n    # question = '대한민국의 수도는 뭐야?'질문Unexpected indentation\n    # result = chat.predict(question)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.abspath(__file__))\nload_dotenv(os.path.join(BASE_DIR, \".env\"))\nclass Request(BaseModel):\n    question: str\nclass Response(BaseModel):\n    answer: str\nllm = ChatOpenAI(openai_api_key=\"...\")\napp = FastAPI()\napp.include_router(router, prefix=\"/api\")\norigins = [",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "llm = ChatOpenAI(openai_api_key=\"...\")\napp = FastAPI()\napp.include_router(router, prefix=\"/api\")\norigins = [\n    \"*\"\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\napp.include_router(router, prefix=\"/api\")\norigins = [\n    \"*\"\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "origins = [\n    \"*\"\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)",
        "detail": "main",
        "documentation": {}
    }
]